/**
 * This script prepares the yarn.lock file generated by Bun for upgrading
 * to Yarn berry (`yarn set version berry && yarn install`). It is only
 * necessary for CI builds, to avoid https://github.com/oven-sh/bun/issues/2257).
 */

import { join as pathJoin } from 'path';

const lernaJsonPath = pathJoin(import.meta.dir, '../lerna.json');
const yarnLockPath = pathJoin(import.meta.dir, '../yarn.lock');
const websitePkgJsonPath = pathJoin(import.meta.dir, './package.json');
const registryBaseURL = 'https://registry.yarnpkg.com';

// Get the version from lerna.json
const lernaJson = Bun.file(lernaJsonPath);
const { version } = await lernaJson.json();

// Get the text of yarn.lock and website/package.json
const yarnLock = await Bun.file(yarnLockPath).text();
const websitePkgJson = await Bun.file(websitePkgJsonPath).text();

const newYarnLock = yarnLock
  // We mock an npm registry URL as the "resolved" specifiers in yarn.lock because
  // otherwise the Yarn berry upgrade doesn't recognize the format and fails.
  .replace(
    /resolved "workspace:packages\/react-querybuilder"/g,
    `resolved "${registryBaseURL}/react-querybuilder/-/react-querybuilder-${version}.tgz"`
  )
  .replace(
    /resolved "workspace:website"/g,
    `resolved "${registryBaseURL}/website/-/website-1.0.0.tgz"`
  )
  .replace(
    /resolved "workspace:packages\/(.*)"/g,
    `resolved "${registryBaseURL}/@react-querybuilder/$2/-/$2-${version}.tgz"`
  )
  // "website" version is always 1.0.0
  .replace(/version "workspace:website"/, `version "1.0.0"`)
  .replace(/version "workspace:packages\/.*"/g, `version "${version}"`)
  // Yarn treats "link:" version specifiers the same as "file:", except when upgrading a v1
  // yarn.lock to berry. Bun treats "link:" different from "file:", so we need to use "file:"
  // in non-CI builds.
  .replace(/(["@])file:/g, `$1link:`);

// See note about "file:" and "link:" above.
const newWebsitePkgJson = websitePkgJson.replace(/(["@])file:/g, `$1link:`);

await Bun.write(yarnLockPath, newYarnLock);
await Bun.write(websitePkgJsonPath, newWebsitePkgJson);
